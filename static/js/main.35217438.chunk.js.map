{"version":3,"sources":["ClassExample.js","App.js","serviceWorker.js","index.js"],"names":["ClassExample","changeText","setState","buttonText","state","buttonClass","console","log","this","className","onClick","Component","App","useState","buttonDisplay","setButtonDisplay","setButtonClass","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAsCeA,E,kDAhCX,aAAe,IAAD,8BACV,gBAQJC,WAAa,WACT,EAAKC,SAAS,CAACC,WAAY,0BAR3B,EAAKC,MAAQ,CACTD,WAAY,wBACZE,YAAa,IAJP,E,gEAcVC,QAAQC,IAAI,sCACZC,KAAKN,SAAS,CAACG,YAAa,c,2CAI5BC,QAAQC,IAAI,8B,6CAIZD,QAAQC,IAAI,4B,+BAIZ,OAAO,4BAAQE,UAAWD,KAAKJ,MAAMC,YAAaK,QAASF,KAAKP,YAAaO,KAAKJ,MAAMD,gB,GA9BrEQ,aCuBZC,MArBf,WAAgB,IAAD,EAE6BC,oBAAS,GAFtC,mBAENC,EAFM,KAESC,EAFT,OAGyBF,mBAAS,IAHlC,mBAGNR,EAHM,KAGOW,EAHP,KAUb,OALAC,qBAAU,WACRX,QAAQC,IAAI,yBACZS,EAAe,cACd,CAACF,IAGF,yBAAKL,UAAU,OAEZK,EAAgB,kBAAC,EAAD,MAAmB,KAEpC,4BAAQJ,QAAS,kBAAIK,GAAiB,KAAtC,0BACA,4BAAQN,UAAWJ,EAAaK,QAAS,kBAAIM,EAAe,aAA5D,uBCTcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.35217438.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass ClassExample extends Component {\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            buttonText: 'To jest tekst buttona',\r\n            buttonClass: ''\r\n        }\r\n    }\r\n\r\n\r\n    changeText = () => {\r\n        this.setState({buttonText: 'Zmieniłem tekst'});\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('działa metoda po zamontowaniu');\r\n        this.setState({buttonClass: 'bg-blue'});\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log('komponent zaktualizowany');\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('Cześć znikam');\r\n    }\r\n\r\n    render() {\r\n        return <button className={this.state.buttonClass} onClick={this.changeText}>{this.state.buttonText}</button>;\r\n    }\r\n    \r\n}\r\n\r\nexport default ClassExample;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport ClassExample from './ClassExample';\n\nfunction App() {\n\n  const [buttonDisplay, setButtonDisplay] = useState(true);\n  const [buttonClass, setButtonClass] = useState('');\n\n  useEffect(()=>{\n    console.log('jestem w hooku efektu');\n    setButtonClass('bg-green');\n  }, [buttonDisplay]);\n\n  return (\n    <div className=\"App\">\n\n      {buttonDisplay ? <ClassExample /> : null} \n  \n      <button onClick={()=>setButtonDisplay(false)}>Usuń drugi button</button>\n      <button className={buttonClass} onClick={()=>setButtonClass('bg-blue')}>Zmieniam tło</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}